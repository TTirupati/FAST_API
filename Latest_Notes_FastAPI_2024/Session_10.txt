Handling Errors
---------------
	There are many situations in which you need to notify an error to a client that is using your API.
	This client could be a browser with a frontend, a code from someone else, an IoT device, etc.

You could need to tell the client that:
	The client doesn't have enough privileges for that operation.
	The client doesn't have access to that resource.
	The item the client was trying to access doesn't exist.

In these cases, you would normally return an HTTP status code in the range of 400 (from 400 to 499).
his is similar to the 200 HTTP status codes (from 200 to 299). Those "200" status codes mean that somehow there was a "success" in the request.


Use HTTPException
-----------------
Example-1 :To return HTTP responses with errors to the client you use HTTPException.
------------------------------------------------------------------------------------

from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}


@app.get("/items/{item_id}")
async def read_item(item_id: str):
    if item_id not in items:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item": items[item_id]}


Add custom headers
------------------
	There are some situations in where it's useful to be able to add custom headers to the HTTP error. For example, for some types of security.
	You probably won't need to use it directly in your code
	But in case you needed it for an advanced scenario, you can add custom headers:

Exmaple-2
from fastapi import FastAPI, HTTPException

app = FastAPI()

items = {"foo": "The Foo Wrestlers"}


@app.get("/items-header/{item_id}")
async def read_item_header(item_id: str):
    if item_id not in items:
        raise HTTPException(
            status_code=404,
            detail="Item not found",
            headers={"X-Error": "There goes my error"},
        )
    return {"item": items[item_id]}


Creating the custom exception handlers
--------------------------------------
	You can add custom exception handlers with the same exception utilities from Starlette.
	Let's say you have a custom exception UnicornException that you (or a library you use) might raise.
	
	And you want to handle this exception globally with FastAPI.
	You could add a custom exception handler with @app.exception_handler()

Example:
-------
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse


class UnicornException(Exception):
    def __init__(self, name: str):
        self.name = name


app = FastAPI()


@app.exception_handler(UnicornException)
async def my_unicorn_exception_handler(request: Request, exc: UnicornException):
    return JSONResponse(
        status_code=418,
        content={"message": f"Oops! {exc.name} did something. There goes a rainbow..."},
    )


@app.get("/unicorns/{name}")
async def read_unicorn(name: str):
    if name == "yolo":
        raise UnicornException(name=name)
    return {"unicorn_name": name}


Override the default exception handlers
---------------------------------------
		These handlers are in charge of returning the default JSON responses when you raise an HTTPException and when the request has invalid data

Override request validation exceptions:
		When a request contains invalid data, FastAPI internally raises a RequestValidationError.
		And it also includes a default exception handler for it

Example
-------
from fastapi import FastAPI, HTTPException
from fastapi.exceptions import RequestValidationError
from fastapi.responses import PlainTextResponse
from starlette.exceptions import HTTPException as StarletteHTTPException

app = FastAPI()


@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request, exc):
    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    return PlainTextResponse(str(exc), status_code=400)


@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 3:
        raise HTTPException(status_code=418, detail="Nope! I don't like 3.")
    return {"item_id": item_id}






